---
import '@/styles/global.css';
import { cn } from '@/lib/utils';
import { ClientRouter } from "astro:transitions";
import Analytics from '@vercel/analytics/astro';
import ProductModal from '@/components/ProductModal.astro';

interface Props {
	title: string;
    className?: string;
}
const { title, className } = Astro.props;
---
<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Najal Pulseras - Home" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<ClientRouter />
    <Analytics />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
         return localStorage.getItem('theme');
        }
        return 'dark';
      })();

      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }
			document.documentElement.setAttribute('data-theme', theme);
    </script>
	</head>
	<body class={cn("bg-background font-futura antialiased", className)}>
		<slot />

    <ProductModal />

    {/* --- SCRIPT DE CONTROL DEL MODAL --- */}
    <script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('product-modal');
    const modalContent = document.getElementById('modal-content');
    const closeBtn = document.getElementById('modal-close-btn');
    const productCards = document.querySelectorAll('.product-card');

    // Elementos del modal
    const imageA = document.getElementById('modal-image-a') as HTMLImageElement;
    const imageB = document.getElementById('modal-image-b') as HTMLImageElement;
    let activeImage = imageA;
    let inactiveImage = imageB;

    const modalTitleMobile = document.getElementById('modal-title-mobile');
    const modalTitleDesktop = document.getElementById('modal-title-desktop');
    const modalDescription = document.getElementById('modal-description');
    const modalRecommendation = document.getElementById('modal-recommendation');
    const modalQuoteLink = document.getElementById('modal-quote-link') as HTMLAnchorElement;
    const prevBtn = document.getElementById('modal-prev-btn');
    const nextBtn = document.getElementById('modal-next-btn');

    let currentImages: any[] = [];
    let currentIndex = 0;

    function updateImage() {
      if (!activeImage || !inactiveImage || currentImages.length === 0) return;

      inactiveImage.src = currentImages[currentIndex].src.src;
      inactiveImage.alt = `Vista ${currentIndex + 1}`;
      
      activeImage.classList.remove('opacity-100');
      activeImage.classList.add('opacity-0');
      
      inactiveImage.classList.remove('opacity-0');
      inactiveImage.classList.add('opacity-100');

      // Intercambiamos los roles de las imágenes
      [activeImage, inactiveImage] = [inactiveImage, activeImage];
    }

    function openModal(product) {
      if (!modal || !product) return;

      currentImages = product.images;
      currentIndex = 0;
      
      // Preparamos la primera imagen sin transición
      activeImage.src = currentImages[currentIndex].src.src;
      activeImage.alt = `Vista ${currentIndex + 1}`;
      activeImage.classList.add('opacity-100');
      inactiveImage.classList.remove('opacity-100');

      if (modalTitleMobile) modalTitleMobile.textContent = product.name;
      if (modalTitleDesktop) modalTitleDesktop.textContent = product.name;
      if (modalDescription) modalDescription.innerHTML = product.description;
      if (modalRecommendation) modalRecommendation.textContent = product.recommendation;
      if (modalQuoteLink) modalQuoteLink.href = product.quoteUrl;

      modal.classList.remove('hidden');
      setTimeout(() => {
        modal.classList.remove('opacity-0');
        modalContent.classList.remove('scale-95');
      }, 10);
      document.body.style.overflow = 'hidden';
    }

    function closeModal() {
      if (!modal) return;
      modal.classList.add('opacity-0');
      modalContent.classList.add('scale-95');
      setTimeout(() => {
        modal.classList.add('hidden');
        // Limpiamos las imágenes al cerrar para evitar flashes de contenido antiguo
        imageA.src = '';
        imageB.src = '';
        imageA.classList.remove('opacity-100');
        imageB.classList.remove('opacity-100');
      }, 300);
      document.body.style.overflow = '';
    }

    document.addEventListener('open-product-modal', (e) => {
    const productData = e.detail.product;
    openModal(productData);
});
    
    if (closeBtn) closeBtn.addEventListener('click', closeModal);
    if (modal) modal.addEventListener('click', (e) => e.target === modal && closeModal());
    if (prevBtn) prevBtn.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
      updateImage();
    });
    if (nextBtn) nextBtn.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % currentImages.length;
      updateImage();
    });
    document.addEventListener('keydown', (e) => e.key === 'Escape' && !modal.classList.contains('hidden') && closeModal());
  });
</script>
	</body>
</html>